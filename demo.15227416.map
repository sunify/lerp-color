{"version":3,"sources":["node_modules/lerp/index.js","node_modules/lerp-array/index.js","node_modules/rgb-hex/index.js","node_modules/hex-rgb/index.js","src/utils.ts","src/index.ts","demo.js"],"names":["module","exports","red","green","blue","alpha","isPercent","toString","includes","res","match","map","Number","undefined","parseFloat","TypeError","Math","round","slice","hexChars","match3or4Hex","match6or8Hex","nonHexChars","RegExp","validHexSize","hex","options","test","replace","length","parseInt","substring","repeat","num","format","steps","document","getElementById","color1","color2","color","percent","link","querySelector","innerHTML","innerText","split","c","join","linkChars","Array","from","querySelectorAll","stepsCount","stepsDivs","i","div","createElement","push","appendChild","refreshColors","c1","value","c2","forEach","step","style","backgroundColor","char","chars","backgroundImage","addEventListener"],"mappings":"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","file":"demo.15227416.map","sourceRoot":"..","sourcesContent":["function lerp(v0, v1, t) {\n    return v0*(1-t)+v1*t\n}\nmodule.exports = lerp","var lerp = require('lerp')\n\nmodule.exports = function lerpValues(value1, value2, t, out) {\n    if (typeof value1 === 'number'\n            && typeof value2 === 'number')\n        return lerp(value1, value2, t)\n    else { //assume array\n        var len = Math.min(value1.length, value2.length)\n        out = out||new Array(len)\n        for (var i=0; i<len; i++) \n            out[i] = lerp(value1[i], value2[i], t)\n        return out\n    }\n}","'use strict';\n/* eslint-disable no-mixed-operators */\nmodule.exports = (red, green, blue, alpha) => {\n\tconst isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string') {\n\t\tconst res = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(Number);\n\t\t// TODO: use destructuring when targeting Node.js 6\n\t\tred = res[0];\n\t\tgreen = res[1];\n\t\tblue = res[2];\n\t\talpha = res[3];\n\t} else if (alpha !== undefined) {\n\t\talpha = parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1);\n\t} else {\n\t\talpha = '';\n\t}\n\n\treturn ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n};\n","'use strict';\n\nconst hexChars = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexChars}]{3}[${hexChars}]?`;\nconst match6or8Hex = `#?[${hexChars}]{6}([${hexChars}]{2})?`;\n\nconst nonHexChars = new RegExp(`[^#${hexChars}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nmodule.exports = function (hex, options = {}) {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alpha = 255;\n\n\tif (hex.length === 8) {\n\t\talpha = parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.substring(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talpha = parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.substring(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst num = parseInt(hex, 16);\n\tconst red = num >> 16;\n\tconst green = (num >> 8) & 255;\n\tconst blue = num & 255;\n\n\treturn options.format === 'array' ?\n\t\t[red, green, blue, alpha] :\n\t\t{red, green, blue, alpha};\n};\n","import rgbHex from 'rgb-hex';\nimport hexRgb from 'hex-rgb';\n\nconst hexColorRegex = /^#(?=[0-9a-fA-F]*$)(?:.{3}|.{4}|.{6}|.{8})$/;\nconst rgbColorRegex = /^rgb\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\)$/;\nconst rgbaColorRegex = /^rgba\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d+(?:\\.\\d+)?|\\.\\d+)\\)$/;\n\nexport const isColor = (c: any) =>\n  hexColorRegex.test(String(c)) ||\n  rgbColorRegex.test(String(c)) ||\n  rgbaColorRegex.test(String(c));\n\nexport const parseColor = (color: string) => {\n  if (hexColorRegex.test(color)) {\n    const [r, g, b, a] = hexRgb(color, { format: 'array' });\n    return [r, g, b, a === 255 ? 1 : a];\n  }\n\n  if (rgbColorRegex.test(color)) {\n    const match = color.match(rgbColorRegex);\n    if (match) {\n      return match\n        .slice(1, 4)\n        .map(Number)\n        .concat([1]);\n    }\n  }\n\n  if (rgbaColorRegex.test(color)) {\n    const match = color.match(rgbaColorRegex);\n    if (match) {\n      return match.slice(1, 5).map(Number);\n    }\n  }\n\n  return undefined;\n};\n\nexport const stringifyColor = (color: number[], target: string) => {\n  const [r, g, b] = color.slice(0, 3).map(Math.round);\n  const a = color[3];\n\n  if (hexColorRegex.test(target)) {\n    if (a === 1) {\n      return `#${rgbHex(r, g, b)}`;\n    }\n\n    return `#${rgbHex(r, g, b, a)}`;\n  }\n\n  if (rgbColorRegex.test(target) && a === 1) {\n    return `rgb(${r}, ${g}, ${b})`;\n  }\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n};\n","import lerpArray from 'lerp-array';\nimport { parseColor, stringifyColor } from './utils';\n\nexport { isColor } from './utils';\n\nconst lerpColor = (start: string, end: string, t: number) => {\n  if (t === 0 || start === end) {\n    return start;\n  }\n\n  if (t === 1) {\n    return end;\n  }\n\n  const startColor = parseColor(start);\n  const endColor = parseColor(end);\n\n  if (startColor && endColor) {\n    return stringifyColor(lerpArray(startColor, endColor, t), end);\n  }\n\n  return undefined;\n};\n\nexport default lerpColor;\n","import lerp from './src/index';\n\nconst steps = document.getElementById('steps');\nconst color1 = document.getElementById('color1');\nconst color2 = document.getElementById('color2');\nconst color = document.getElementById('color');\nconst percent = document.getElementById('percent');\nconst link = document.querySelector('h1 a');\n\nlink.innerHTML = link.innerText\n  .split('')\n  .map(c => `<span>${c}</span>`)\n  .join('');\n\nconst linkChars = Array.from(link.querySelectorAll('span'));\n\nconst stepsCount = 6;\nconst stepsDivs = [];\nfor (let i = 0; i < stepsCount; i += 1) {\n  const div = document.createElement('div');\n  stepsDivs.push(div);\n  steps.appendChild(div);\n}\n\nfunction refreshColors() {\n  const c1 = color1.value;\n  const c2 = color2.value;\n\n  stepsDivs.forEach((step, i) => {\n    step.style.backgroundColor = lerp(c1, c2, i / (stepsCount - 1));\n  });\n  color.style.backgroundColor = lerp(c1, c2, Number(percent.value) / 100);\n\n  linkChars.forEach((char, i, chars) => {\n    char.style.color = lerp(c1, c2, i / (chars.length - 1));\n  });\n\n  link.style.backgroundImage = `linear-gradient(to right, ${c1}, ${c2})`;\n}\n\ncolor1.value = '#00aaaa';\ncolor2.value = '#fd8878';\nrefreshColors();\ncolor1.addEventListener('change', refreshColors);\ncolor2.addEventListener('change', refreshColors);\npercent.addEventListener('change', refreshColors);\npercent.addEventListener('input', refreshColors);\n"]}